Index: src/main/java/com/gmail/focusdigit/GamePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/gmail/focusdigit/GamePanel.java	(date 1636524938617)
+++ src/main/java/com/gmail/focusdigit/GamePanel.java	(date 1636524938617)
@@ -1,30 +1,22 @@
 package com.gmail.focusdigit;
 
-import com.github.kwhat.jnativehook.GlobalScreen;
-import com.github.kwhat.jnativehook.NativeHookException;
-import com.github.kwhat.jnativehook.keyboard.NativeKeyEvent;
-import com.github.kwhat.jnativehook.keyboard.NativeKeyListener;
-
 import javax.swing.*;
 import java.awt.*;
+import java.awt.event.*;
+import java.util.ArrayList;
 import java.util.InvalidPropertiesFormatException;
 import java.util.Random;
-import java.util.concurrent.*;
 
-public class GamePanel extends JPanel
-{
+public class GamePanel extends JPanel {
     App parent;
     private final int width;
     private final int height;
     private final int brickWidth;
-    private volatile boolean gameFlag;
+    private volatile boolean gameFlag,mooveFlag,stepFlag;
     private Figure currentFigure;
     private Brick[][] list;
     private int pause;
     private int timeOut;
-    ExecutorService exService;
-    private static ThreadPoolExecutor fixedThreadPoolWithQueueSize;
-
 
     public GamePanel(App parent, int width, int height, int brickWidth){
         this.parent = parent;
@@ -32,34 +24,34 @@
         this.height = height*brickWidth;
         this.brickWidth=brickWidth;
         this.setSize(this.width,this.height);
-        gameFlag=false;
+        gameFlag=true;
+        mooveFlag=true;
+        stepFlag=false;
         timeOut=500;
         pause=timeOut;
         list = new Brick[height][width];
 
-        fixedThreadPoolWithQueueSize = (ThreadPoolExecutor)Executors.newCachedThreadPool();
-        fixedThreadPoolWithQueueSize.setCorePoolSize(1);
-
-        startGame();
+        start();
     }
 
-    private void startGame(){
+    private void start(){
         Thread thread = new Thread(new Runnable() {
             @Override
             public void run() {
                 try {
                     int counter=0;
-                    while (true) {
+                    while (gameFlag) {
                         parent.addFiguresCount(++counter);
 
                         currentFigure = getRandomFigure();
                         if(currentFigure==null)continue;
 
-                        while (downCheck()){
-                            while (!gameFlag){
-                                Thread.sleep(1000);
-                            }
-                            mooveFigure(-1);
+                        while (mooveCheck(currentFigure)){
+                            while (!mooveFlag) Thread.sleep(1);
+                            stepFlag=true;
+                            currentFigure.mooveRelative(0,1);
+                            GamePanel.this.repaint();
+                            stepFlag=false;
 
                             Thread.sleep(pause);
                         }
@@ -75,11 +67,33 @@
         thread.start();
     }
 
+    private void endOfGame() {
+        JOptionPane.showMessageDialog(null,
+                "You loose!",
+                "Tetris demo",
+                JOptionPane.WARNING_MESSAGE);
+        System.exit(0);
+    }
+
+    private boolean mooveCheck(Figure figure){
+        for(Brick brick:figure.getBricks()){
+            if(brick.getPoint().getY()/brickWidth+1 >= list.length) return false;
+
+            for(Brick[] row:list)
+                for(Brick b:row) {
+                    if (b!=null
+                            && brick.getPoint().getX()==b.getPoint().getX()
+                                && brick.getPoint().getY() + brickWidth == b.getPoint().getY())
+                                     return false;
+                }
+            }
+        return true;
+    }
+
     private void figureStop(Figure figure){
-        fixedThreadPoolWithQueueSize.getQueue().clear();
         for(Brick b:figure.getBricks()) {
-            if (b.getY()<=0) endOfGame();
-            list[b.getY() / brickWidth][b.getX() / brickWidth] = b;
+            if (b.getPoint().getY()<=0) endOfGame();
+            list[b.getPoint().getY() / brickWidth][b.getPoint().getX() / brickWidth] = b;
         }
         checkMap();
     }
@@ -106,12 +120,12 @@
                 if(list[i][j]!=null){
                     list[i+1][j]=list[i][j];
                     list[i][j]=null;
-                    list[i+1][j].setY(list[i+1][j].getY()+brickWidth);
+                    list[i+1][j].getPoint().setY(list[i+1][j].getPoint().getY()+brickWidth);
                 }
             }
         }
         parent.addLevel();
-        setTimeOut(timeOut-10);
+        setTimeOut(timeOut-20);
         slowMoition();
         GamePanel.this.repaint();
     }
@@ -129,28 +143,64 @@
     }
 
     public void mooveFigure(int code){
-        fixedThreadPoolWithQueueSize.execute(new MooveTask(code));
-    }
-
-    private boolean downCheck(){
-        for(Brick brick:currentFigure.getBricks()){
-            if(brick.getY()/brickWidth+1 >= list.length) return false;
-
-            for(Brick[] row:list)
-                for(Brick b:row) {
-                    if (b!=null
-                            && brick.getX()==b.getX()
-                            && brick.getY() + brickWidth == b.getY())
-                        return false;
+        switch (code){
+            case 39:
+                while (stepFlag) {
+                    try {
+                        Thread.currentThread().sleep(1);
+                    } catch (InterruptedException e) {
+                        e.printStackTrace();
+                    }
                 }
+                    mooveFlag=false;
+                    if(rightCheck())currentFigure.mooveRelative(1,0);
+                    mooveFlag=true;
+                break;
+            case 37:
+                while (stepFlag) {
+                    try {
+                        Thread.currentThread().sleep(1);
+                    } catch (InterruptedException e) {
+                        e.printStackTrace();
+                    }
+                }
+                    mooveFlag=false;
+                    if(leftCheck())currentFigure.mooveRelative(-1,0);
+                    mooveFlag=true;
+                break;
+            case 38:
+                while (stepFlag) {
+                    try {
+                        Thread.currentThread().sleep(1);
+                    } catch (InterruptedException e) {
+                        e.printStackTrace();
+                    }
+                }
+                mooveFlag=false;
+                if (turnCheck()) currentFigure.turnRelative(90);
+                mooveFlag=true;
+                break;
+            case 40:
+                while (stepFlag) {
+                    try {
+                        Thread.currentThread().sleep(1);
+                    } catch (InterruptedException e) {
+                        e.printStackTrace();
+                    }
+                }
+                mooveFlag=false;
+                if (turnCheck()) currentFigure.turnRelative(270);
+                mooveFlag=true;
+                break;
+            default:
+                break;
         }
-        return true;
     }
 
     private boolean turnCheck() {
         Figure f = new Figure((currentFigure));
         f.turnRelative(90);
-        if(f.getX()<width/2){
+        if(f.getPoint().getX()<width/2){
             f.mooveRelative(1,0);
             if(leftCheck())return true;
         }else{
@@ -162,26 +212,26 @@
 
     private boolean leftCheck() {
         for(Brick brick:currentFigure.getBricks()) {
-            int curX = brick.getX() - brickWidth;
+            int curX = brick.getPoint().getX() - brickWidth;
             if (curX < 0) return false;
 
             for (Brick[] row : list)
                 for (Brick b : row)
-                    if (b != null && b.getX() == curX
-                        && b.getY()==currentFigure.getY()) return false;
+                    if (b != null && b.getPoint().getX() == curX
+                        && b.getPoint().getY()==currentFigure.getPoint().getY()) return false;
         }
         return true;
     }
 
     private boolean rightCheck() {
         for(Brick brick:currentFigure.getBricks()){
-            int curX = brick.getX()+brickWidth;
+            int curX = brick.getPoint().getX()+brickWidth;
             if(curX>width-brickWidth) return false;
 
             for(Brick[] row:list)
                 for(Brick b:row)
-                    if(b!=null && b.getX()==curX
-                        && b.getY()==currentFigure.getY()) return false;
+                    if(b!=null && b.getPoint().getX()==curX
+                        && b.getPoint().getY()==currentFigure.getPoint().getY()) return false;
         }
         return true;
     }
@@ -205,6 +255,10 @@
         return null;
     }
 
+    public int getTimeOut() {
+        return timeOut;
+    }
+
     public void setTimeOut(int timeOut) {
         this.timeOut = timeOut;
     }
@@ -222,49 +276,5 @@
     }
 
     public void setFlag() {
-        gameFlag=!gameFlag;
-    }
-
-    private void endOfGame() {
-        JOptionPane.showMessageDialog(null,
-                "You loose!",
-                "Tetris demo",
-                JOptionPane.WARNING_MESSAGE);
-        System.exit(0);
-    }
-
-    private class MooveTask implements Runnable{
-        private int code;
-
-        public MooveTask(int code) {
-            this.code=code;
-        }
-
-        @Override
-        public void run() {
-            switch (code){
-                case -1:
-                    if(downCheck()) currentFigure.mooveRelative(0,1);
-                    break;
-                case 32:
-                    fastMotion();
-                    break;
-                case 39:
-                    if(rightCheck())currentFigure.mooveRelative(1,0);
-                    break;
-                case 37:
-                    if(leftCheck())currentFigure.mooveRelative(-1,0);
-                    break;
-                case 38:
-                    if (turnCheck()) currentFigure.turnRelative(90);
-                    break;
-                case 40:
-                    if (turnCheck()) currentFigure.turnRelative(270);
-                    break;
-                default:
-                    break;
-            }
-            GamePanel.this.repaint();
-        }
     }
 }
